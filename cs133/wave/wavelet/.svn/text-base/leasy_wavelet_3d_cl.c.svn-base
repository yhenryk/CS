// Leasy (linear prediction) Wavelet Transform with Lifting
// Author: Arkadi Kagan
//
// This code strictly follows recipe from:
// Ingrid Doubaches and Wim Sweldens, "Factoring Wavelet Transform into Lifting Steps",
// Journal of Fourier Analysis and Applications, Volume 4, Number 3, May 1998, pages 247-269,
// DOI: 10.1007/BF02476026
//
// In this module we define a 2-D Discrete Wavelet Transform implemented by
// pyramid decomposition. The pyramid decomposition is defined in
// David Salomon, "Data Compression: The Complete Reference, Fourth Edition", section 5.6.1, p. 20
// Here is a quotation:
// "The latter method computes the wavelet transform of the image by alternating between rows and columns. The first step is
//  to calculate averages and differences for all the rows (just one iteration, not the entire wavelet transform). This creates
//  averages in the left half of the image and differences in the right half. The second step is to calculate averages and
//  differences (just one iteration) for all the columns, which results in averages in the top-left quadrant of the image and
//  differences elsewhere."
//

#include "leasy_wavelet_3d_cl.h"
#include <math.h>
#include <stdlib.h>
#include <memory.h>
#include <stdio.h>
#include <ctype.h>

#include <CL/cl.h>

#define DIV_2_ROUND_UP(x) (((int)(x)) / 2 + ((int)(x)) % 2)

static int *sub_lengths_x = NULL, *sub_lengths_y = NULL, *sub_lengths_z = NULL;
static int count_subs = 0;
static signed short *split_buffer = NULL;
static int width, height, depth;

// Let only single device to do the work
static cl_context context;
static cl_device_id device;
static cl_kernel
	kernel_forward,
	kernel_inverse;
static cl_command_queue queue;
static cl_mem cl_split_buffer;

#define KERNEL_PARAMS "__global signed short *split_buffer, "
#define KERNEL_PARAMS_PASS "split_buffer, "

static const char *cl_code =
	"void split(" KERNEL_PARAMS "__global signed short *x, int length, int gap)" "\n"
	"{" "\n"
	"	int i, j;" "\n"
	"	for (i = 0, j = 0; i < length * gap; i += 2 * gap, j++)" "\n"
	"		split_buffer[j] = x[i];" "\n"
	"	for (i = gap; i < length * gap; i += 2 * gap, j++)" "\n"
	"		split_buffer[j] = x[i];" "\n"
	"	for (i = 0, j = 0; i < length; i++, j += gap)" "\n"
	"		x[j] = split_buffer[i];" "\n"
	"}" "\n"
	"void merge(" KERNEL_PARAMS "__global signed short *x, int length, int gap)" "\n"
	"{" "\n"
	"	int i, j;" "\n"
	"	for (i = 0, j = 0; i < length; i += 2, j += gap)" "\n"
	"		split_buffer[i] = x[j];" "\n"
	"	for (i = 1; i < length; i += 2, j += gap)" "\n"
	"		split_buffer[i] = x[j];" "\n"
	"	for (i = 0, j = 0; i < length; i++, j += gap)" "\n"
	"		x[j] = split_buffer[i];" "\n"
	"}" "\n"
	"\n"
	"void predict_odd(" KERNEL_PARAMS "__global signed short *x, int length, int gap)" "\n"
	"{" "\n"
	"	int i;" "\n"
	"	for (i = 1; i < length; i += 2)" "\n"
	"	{" "\n"
	"		if (i < length - 1)" "\n"
	"			x[i * gap] -= (x[(i - 1) * gap] + x[(i + 1) * gap]) / 2;" "\n"
	"		else" "\n"
	"			x[i * gap] -= x[(i - 1) * gap];" "\n"
	"	}" "\n"
	"}" "\n"
	"\n"
	"void update_even(" KERNEL_PARAMS "__global signed short *x, int length, int gap)" "\n"
	"{" "\n"
	"	int i;" "\n"
	"	for (i = 0; i < length; i += 2)" "\n"
	"	{" "\n"
	"		if (i > 0 && i < length - 1)" "\n"
	"			x[i * gap] += (x[(i - 1) * gap] + x[(i + 1) * gap]) / 4;" "\n"
	"		else if (i > 0)" "\n"
	"			x[i * gap] += x[(i - 1) * gap] / 2;" "\n"
	"		else if (i < length - 1)" "\n"
	"			x[i * gap] += x[(i + 1) * gap] / 2;" "\n"
	"	}" "\n"
	"}" "\n"
	"\n"
	"// Reverse of update_even" "\n"
	"void restore_even(" KERNEL_PARAMS "__global signed short *x, int length, int gap)" "\n"
	"{" "\n"
	"	int i;" "\n"
	"	for (i = 0; i < length; i += 2)" "\n"
	"	{" "\n"
	"		if (i > 0 && i < length - 1)" "\n"
	"			x[i * gap] -= (x[(i - 1) * gap] + x[(i + 1) * gap]) / 4;" "\n"
	"		else if (i > 0)" "\n"
	"			x[i * gap] -= x[(i - 1) * gap] / 2;" "\n"
	"		else if (i < length - 1)" "\n"
	"			x[i * gap] -= x[(i + 1) * gap] / 2;" "\n"
	"	}" "\n"
	"}" "\n"
	"\n"
	"// Reverse of predict_odd" "\n"
	"void restore_odd(" KERNEL_PARAMS "__global signed short *x, int length, int gap)" "\n"
	"{" "\n"
	"	int i;" "\n"
	"	for (i = 1; i < length; i += 2)" "\n"
	"	{" "\n"
	"		if (i < length - 1)" "\n"
	"			x[i * gap] += (x[(i - 1) * gap] + x[(i + 1) * gap]) / 2;" "\n"
	"		else" "\n"
	"			x[i * gap] += x[(i - 1) * gap];" "\n"
	"	}" "\n"
	"}" "\n"
	"\n"
	"__kernel void wavelet_forward(" KERNEL_PARAMS "__global signed short *x, int offset, int length, int gap, int index_multiplier)" "\n"
	"{" "\n"
	"	const int i = get_global_id(0);" "\n"
	"	predict_odd(" KERNEL_PARAMS_PASS "x + offset + i * index_multiplier, length, gap);" "\n"
	"	update_even(" KERNEL_PARAMS_PASS "x + offset + i * index_multiplier, length, gap);" "\n"
	"	split(" KERNEL_PARAMS_PASS "x + offset + i * index_multiplier, length, gap);" "\n"
	"}" "\n"
	"\n"
	"__kernel void wavelet_inverse(" KERNEL_PARAMS "__global signed short *x, int offset, int length, int gap, int index_multiplier)" "\n"
	"{" "\n"
	"	const int i = get_global_id(0);" "\n"
	"	merge(" KERNEL_PARAMS_PASS "x + offset + i * index_multiplier, length, gap);" "\n"
	"	restore_even(" KERNEL_PARAMS_PASS "x + offset + i * index_multiplier, length, gap);" "\n"
	"	restore_odd(" KERNEL_PARAMS_PASS "x + offset + i * index_multiplier, length, gap);" "\n"
	"}" "\n"
	"\n"
	;

static void cl_check(cl_int result)
{
	if (result == CL_SUCCESS)
		return;
	fprintf(stderr, "Error: %d\n", result);
	exit(result);
}

static void enqueue_forward(cl_mem x, int offset, int length, int gap, size_t count, int index_multiplier)
{
	cl_check(clSetKernelArg(kernel_forward, 0, sizeof(cl_mem), &cl_split_buffer));

	cl_check(clSetKernelArg(kernel_forward, 1, sizeof(cl_mem), &x));
	cl_check(clSetKernelArg(kernel_forward, 2, sizeof(int), &offset));
	cl_check(clSetKernelArg(kernel_forward, 3, sizeof(int), &length));
	cl_check(clSetKernelArg(kernel_forward, 4, sizeof(int), &gap));
	cl_check(clSetKernelArg(kernel_forward, 5, sizeof(int), &index_multiplier));

	cl_check(clEnqueueNDRangeKernel(queue, kernel_forward, 1, NULL, &count, &count, 0, NULL, NULL));
}

static void enqueue_inverse(cl_mem x, int offset, int length, int gap, size_t count, int index_multiplier)
{
	cl_check(clSetKernelArg(kernel_inverse, 0, sizeof(cl_mem), &cl_split_buffer));

	cl_check(clSetKernelArg(kernel_inverse, 1, sizeof(cl_mem), &x));
	cl_check(clSetKernelArg(kernel_inverse, 2, sizeof(int), &offset));
	cl_check(clSetKernelArg(kernel_inverse, 3, sizeof(int), &length));
	cl_check(clSetKernelArg(kernel_inverse, 4, sizeof(int), &gap));
	cl_check(clSetKernelArg(kernel_inverse, 5, sizeof(int), &index_multiplier));

	cl_check(clEnqueueNDRangeKernel(queue, kernel_inverse, 1, NULL, &count, &count, 0, NULL, NULL));
}

void wavelet_forward_3d_cl(signed short *x)
{
	cl_mem mem_x = clCreateBuffer(context, CL_MEM_READ_WRITE | CL_MEM_COPY_HOST_PTR, sizeof(signed short) * width * height * depth, x, NULL);
	int i, ii, iii, jj;
	for (i = height, ii = width, iii = depth; i > 1 || ii > 1 || iii > 1; i = DIV_2_ROUND_UP(i), ii = DIV_2_ROUND_UP(ii), iii = DIV_2_ROUND_UP(iii))
	{
		for (jj = 0; jj < iii; jj++)
		{
			enqueue_forward(mem_x, jj * width * height, ii, 1, i, width);
			enqueue_forward(mem_x, jj * width * height, i, width, ii, 1);
		}
		for (jj = 0; jj < ii; jj++)
			enqueue_forward(mem_x, jj, iii, width * height, i, width);
	}
	cl_check(clEnqueueReadBuffer(queue, mem_x, CL_TRUE, 0, sizeof(signed short) * width * height * depth, x, 0, NULL, NULL));
	cl_check(clReleaseMemObject(mem_x));
}

void wavelet_inverse_3d_cl(signed short *x)
{
	cl_mem mem_x = clCreateBuffer(context, CL_MEM_READ_WRITE | CL_MEM_COPY_HOST_PTR, sizeof(signed short) * width * height * depth, x, NULL);
	int i, k;
	for (i = count_subs - 1; i >= 0; i--)
	{
		for (k = 0; k < sub_lengths_y[i]; k++)
			enqueue_inverse(mem_x, k * width, sub_lengths_z[i], width * height, sub_lengths_x[i], 1);
		for (k = 0; k < sub_lengths_z[i]; k++)
		{
			enqueue_inverse(mem_x, k * width * height, sub_lengths_y[i], width, sub_lengths_x[i], 1);
			enqueue_inverse(mem_x, k * width * height, sub_lengths_x[i], 1, sub_lengths_y[i], width);
		}
	}
	cl_check(clEnqueueReadBuffer(queue, mem_x, CL_TRUE, 0, sizeof(signed short) * width * height * depth, x, 0, NULL, NULL));
	cl_check(clReleaseMemObject(mem_x));
}

void wavelet_copy_fragment_3d_cl(signed short *source, signed short *target, int fragment, int *fragment_width, int *fragment_height, int *fragment_depth)
{
	int i, j;
	if (fragment_width != NULL)
		*fragment_width = sub_lengths_x[fragment];
	if (fragment_height != NULL)
		*fragment_height = sub_lengths_y[fragment];
	if (fragment_depth != NULL)
		*fragment_depth = sub_lengths_z[fragment];
	if (target != NULL && source != NULL)
	{
		for (j = 0; j < sub_lengths_z[fragment]; j++)
		for (i = 0; i < sub_lengths_y[fragment]; i++)
		{
			memcpy(
				target + sub_lengths_x[fragment] * i + sub_lengths_x[fragment] * sub_lengths_y[fragment] * j,
				source + width * i + width * height * j,
				sizeof(signed short) * sub_lengths_x[fragment]);
		}
	}
}
void wavelet_paste_fragment_3d_cl(signed short *source, signed short *target, int fragment, int *fragment_width, int *fragment_height, int *fragment_depth)
{
	int i, j;
	if (fragment_width != NULL)
		*fragment_width = sub_lengths_x[fragment];
	if (fragment_height != NULL)
		*fragment_height = sub_lengths_y[fragment];
	if (fragment_depth != NULL)
		*fragment_depth = sub_lengths_z[fragment];
	if (source != NULL && target != NULL)
	{
		for (j = 0; j < sub_lengths_z[fragment]; j++)
		for (i = 0; i < sub_lengths_y[fragment]; i++)
		{
			memcpy(
				target + width * i + width * height * j,
				source + sub_lengths_x[fragment] * i + sub_lengths_x[fragment] * sub_lengths_y[fragment] * j,
				sizeof(signed short) * sub_lengths_x[fragment]);
		}
	}
}

static void init_cl()
{
	cl_uint num_platforms;
	cl_platform_id *platforms;
	cl_uint num_devices;
	cl_device_id *devices;
	cl_context_properties properties[3];
	cl_program program;

	cl_check(clGetPlatformIDs(0, NULL, &num_platforms));
	platforms = (cl_platform_id*)malloc(sizeof(cl_platform_id) * num_platforms);
	cl_check(clGetPlatformIDs(num_platforms, platforms, NULL));

	cl_check(clGetDeviceIDs(platforms[0], CL_DEVICE_TYPE_ALL, 0, NULL, &num_devices));
	devices = (cl_device_id*)malloc(sizeof(cl_device_id) * num_devices);
	cl_check(clGetDeviceIDs(platforms[0], CL_DEVICE_TYPE_ALL, num_devices, devices, NULL));
	device = devices[0];

	properties[0] = CL_CONTEXT_PLATFORM;
	properties[1] = (cl_context_properties)platforms[0];
	properties[2] = 0;
	context = clCreateContext(properties, num_devices, devices, NULL, NULL, NULL);

	program = clCreateProgramWithSource(context, 1,
		&cl_code,
		NULL, NULL);
	if (clBuildProgram(program, num_devices, devices, "", NULL, NULL) != CL_SUCCESS)
	{
		size_t size;
		char *log;
		cl_check(clGetProgramBuildInfo(program, device, CL_PROGRAM_BUILD_LOG, 0, NULL, &size));
		log = (char*)malloc(size + 1);
		cl_check(clGetProgramBuildInfo(program, device, CL_PROGRAM_BUILD_LOG, size, log, NULL));
		log[size] = 0;
		fprintf(stderr, "Build error: %s\n", log);
		free(log);
		exit(-1);
	}

	kernel_forward = clCreateKernel(program, "wavelet_forward", NULL);
	kernel_inverse = clCreateKernel(program, "wavelet_inverse", NULL);

	clReleaseProgram(program);
	free(devices);
	free(platforms);

	queue = clCreateCommandQueue(context, device, 0, NULL);

	cl_split_buffer = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_USE_HOST_PTR, sizeof(signed short) * width * height * depth, split_buffer, NULL);
}

void wavelet_init_3d_cl(int a_width, int a_height, int a_depth)
{
	int i, ii, iii;
	width = a_width;
	height = a_height;
	depth = a_depth;

	// In case of length power of two, fill array with power of two values descending from length.
	// In all other cases this sequence is not trivial.
	sub_lengths_x = (int*)malloc(sizeof(int) * (int)(1 + log(max(max(width, height), depth)) / log(2)));
	sub_lengths_y = (int*)malloc(sizeof(int) * (int)(1 + log(max(max(width, height), depth)) / log(2)));
	sub_lengths_z = (int*)malloc(sizeof(int) * (int)(1 + log(max(max(width, height), depth)) / log(2)));
	for (ii = width, i = height, iii = depth; ii > 1 || i > 1 || iii > 1; ii = DIV_2_ROUND_UP(ii), i = DIV_2_ROUND_UP(i), iii = DIV_2_ROUND_UP(iii))
	{
		sub_lengths_x[count_subs] = ii;
		sub_lengths_y[count_subs] = i;
		sub_lengths_z[count_subs] = iii;
		count_subs++;
	}

	split_buffer = (signed short*)malloc(sizeof(signed short) * max(max(width, height), depth));

	init_cl();
}
void wavelet_close_3d_cl()
{
	cl_check(clReleaseMemObject(cl_split_buffer));

	cl_check(clReleaseCommandQueue(queue));
	cl_check(clReleaseKernel(kernel_forward));
	cl_check(clReleaseKernel(kernel_inverse));
	cl_check(clReleaseContext(context));

	count_subs = 0;
	free(sub_lengths_x);
	free(sub_lengths_y);
	free(sub_lengths_z);
	free(split_buffer);
}
